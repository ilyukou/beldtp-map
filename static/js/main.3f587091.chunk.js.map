{"version":3,"sources":["Component/MarkerMap.js","Component/Main.js","App.js","serviceWorker.js","index.js"],"names":["MarkerMap","this","props","value","map","marker","Marker","key","id","position","latitude","longitude","Popup","getMarkerInfo","className","getMarkerImgAsDiv","attachmentFile","dangerouslySetInnerHTML","createMarkup","getDataAsDiv","__html","text","hour","minute","month","day","year","img","fileName","alt","src","height","width","Map","center","zoom","TileLayer","url","attribution","getMarkers","Component","Main","state","data","dataJson","document","title","default","incident","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gu2CAKqBA,G,uLAEJ,IAAD,OACR,OAAOC,KAAKC,MAAMC,MAAMC,KAAI,SAACC,GAAD,OACxB,kBAACC,EAAA,EAAD,CAAQC,IAAKF,EAAOG,GAAIC,SAAU,CAACJ,EAAOK,SAAUL,EAAOM,YACvD,kBAACC,EAAA,EAAD,KACK,EAAKC,cAAcR,U,oCAMtBA,GACV,OAAO,yBAAKS,UAAU,uBAClB,yBAAKA,UAAU,SAASb,KAAKc,kBAAkBV,EAAOW,iBACtD,yBAAKF,UAAU,kBAAkBG,wBAAyBhB,KAAKiB,aAAab,KAC5E,yBAAKS,UAAU,SAASb,KAAKkB,aAAad,O,mCAIrCA,GACT,MAAO,CAACe,OAAQf,EAAOgB,Q,mCAGdhB,GACT,IAAIiB,EAAOjB,EAAOiB,KACfA,EAAO,KACNA,EAAO,IAAMA,GAGjB,IAAIC,EAASlB,EAAOkB,OACjBA,EAAS,KACRA,EAAS,IAAMA,GAGnB,IAAIC,EAAQnB,EAAOmB,MAMnB,OALGA,EAAQ,KACPA,EAAQ,IAAMA,GAIX,8BAAOF,EAAP,IAAcC,EAAd,IAAuBlB,EAAOoB,IAA9B,IAAoCD,EAAQ,EAA5C,IAAgDnB,EAAOqB,Q,wCAIhDV,GACd,OAAOA,EAAeZ,KAAI,SAACuB,GAAD,OAE3B,yBAAKpB,IAAKoB,EAAIC,SAAUd,UAAU,mBAAmBe,IAAI,MAAMC,IAAK,qDAAuDH,EAAIC,SAAUG,OAAO,MAAMC,MAAM,a,+BAK3J,OACI,6BACI,kBAACC,EAAA,EAAD,CAAKC,OAAQ,CAAC,UAAU,WAAYC,KAAM,GACtC,kBAACC,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,2EAEfrC,KAAKsC,mB,GA5DaC,c,2BCElBC,E,kDACjB,WAAYvC,GAAO,IAAD,8BACd,cAAMA,IAEDwC,MAAQ,CACTC,KAAOC,GAJG,E,qDAWd,OADAC,SAASC,MAAQ,oDAEb,6BACI,kBAAC,EAAD,CAAW3C,MAAOF,KAAKyC,MAAMC,KAAKI,QAAQC,gB,GAdxBR,a,MCKnBS,MANf,WACE,OACE,kBAAC,EAAD,OCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFZ,SAASa,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3f587091.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\r\nimport \"./MarkerMap.css\";\r\nimport \"./MediaQuery.css\";\r\n\r\nexport default class MarkerMap extends Component {\r\n\r\n    getMarkers(){\r\n        return this.props.value.map((marker) =>\r\n            <Marker key={marker.id} position={[marker.latitude, marker.longitude]}>\r\n                <Popup >\r\n                    {this.getMarkerInfo(marker)}\r\n                </Popup>\r\n            </Marker>\r\n        ); \r\n    }\r\n\r\n    getMarkerInfo(marker){\r\n        return <div className=\"popupInfoWrapperDiv\">\r\n            <div className=\"popup\">{this.getMarkerImgAsDiv(marker.attachmentFile)}</div>\r\n            <div className=\"popup popupText\" dangerouslySetInnerHTML={this.createMarkup(marker)} />\r\n            <div className=\"popup\">{this.getDataAsDiv(marker)}</div>\r\n        </div>\r\n    }\r\n\r\n    createMarkup(marker) {\r\n        return {__html: marker.text};\r\n      }\r\n\r\n    getDataAsDiv(marker){\r\n        let hour = marker.hour;\r\n        if(hour < 10){\r\n            hour = \"0\" + hour;\r\n        }\r\n\r\n        let minute = marker.minute;\r\n        if(minute < 10){\r\n            minute = \"0\" + minute;\r\n        }\r\n\r\n        let month = marker.month;\r\n        if(month < 10){\r\n            month = \"0\" + month;\r\n        }\r\n\r\n\r\n        return <span>{hour}:{minute} {marker.day}/{month + 1}/{marker.year}</span>\r\n    }\r\n\r\n\r\n    getMarkerImgAsDiv(attachmentFile){\r\n        return attachmentFile.map((img) => \r\n       // <a className=\"popup\" href={\"https://beldtp.ams3.digitaloceanspaces.com/beldtp/\" + img.fileName}>вложение</a>)\r\n       <img key={img.fileName} className=\"scale popupImage\" alt=\"img\" src={\"https://beldtp.ams3.digitaloceanspaces.com/beldtp/\" + img.fileName} height=\"120\" width=\"120\"/>)\r\n\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Map center={[53.904541,27.561523]} zoom={6}>\r\n                    <TileLayer\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    />\r\n                    {this.getMarkers()}\r\n                </Map>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport MarkerMap from './MarkerMap';\r\n\r\nimport './Main.css';\r\n\r\nimport * as dataJson from './data.json';\r\n\r\nexport default class Main extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            data : dataJson\r\n        };\r\n    }\r\n\r\n\r\n    render(){\r\n        document.title = \"Карта ДТП\"\r\n        return(\r\n            <div>\r\n                <MarkerMap value={this.state.data.default.incident}/>\r\n            </div>\r\n        );\r\n        \r\n    }\r\n}","import React from \"react\";\n\nimport Main from './Component/Main';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Main/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}